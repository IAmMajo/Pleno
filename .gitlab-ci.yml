stages:
  - pull
  - build
  - distribute
  - deploy

variables:
  SERVER_BRANCH: staging-backend# $BACKEND_STAGING_BRANCH s. https://gitlab.com/gitlab-org/gitlab/-/issues/327780

debug-pull:
  stage: pull
  script:
    - echo '$CI_COMMIT_BRANCH == $SERVER_BRANCH && $CI_PIPELINE_SOURCE == "push"''
    - echo "$CI_COMMIT_BRANCH == $SERVER_BRANCH && $CI_PIPELINE_SOURCE == \"push\""

dto-swiftkotlin:
  stage: build
  script:
      - ./translate-dtos.sh
      - git add *
      - git status
      - if [ "$(git status --porcelain | wc -l)" -eq "0" ]; then exit 0; fi
      - git commit -m "${SWIFTKOTLIN_COMMIT_MESSAGE}"
      - git push -o ci.skip "https://gitlab-ci-token:${PROJECT_ACCESS_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git" HEAD:${CI_COMMIT_BRANCH}
  rules:
    - if: $CI_COMMIT_BRANCH == $DTOS_STAGING_BRANCH && $CI_PIPELINE_SOURCE == "push"
      changes:
        - DTOs/Sources/**/*
        - translate-dtos.sh
      when: always

dto-main-staging-mrs:
  stage: distribute
  variables:
    COMMIT_MERGE_REQ_URL: "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/commits/$CI_COMMIT_SHA/merge_requests"
  script:
    - 'MERGE_REQ=$(curl -s --header "PRIVATE-TOKEN: $PROJECT_API_TOKEN" $COMMIT_MERGE_REQ_URL)'
    - MR_BRANCH_NAME=$(echo $MERGE_REQ | jq -r '.[0].source_branch')
    - if [[ "$MR_BRANCH_NAME" != "$DTOS_STAGING_BRANCH" ]]; then exit 0; fi
    # staging-backend
    - >
      curl --header "Content-Type: application/json"
      --header "PRIVATE-TOKEN: $PROJECT_API_TOKEN"
      --request POST
      --data "$(printf '{"source_branch":"%s","target_branch":"%s","title":"%s","assignee_id":%s,"labels":"%s","reviewer_ids":[%s]}' "$CI_DEFAULT_BRANCH" "$BACKEND_STAGING_BRANCH" "$(printf "$DTO_MAIN_STAGING_MRS_TITLE" "$BACKEND_STAGING_BRANCH")" "$(echo $MERGE_REQ | jq -r '.[0].assignee.id')" "$BACKEND_LABEL" "$(echo $MERGE_REQ | jq -r '.[0].reviewers[0].id')")"
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/merge_requests"
    # staging-android
    - >
      curl --header "Content-Type: application/json"
      --header "PRIVATE-TOKEN: $PROJECT_API_TOKEN"
      --request POST
      --data "$(printf '{"source_branch":"%s","target_branch":"%s","title":"%s","assignee_id":%s,"labels":"%s","reviewer_ids":[%s]}' "$CI_DEFAULT_BRANCH" "$ANDROID_STAGING_BRANCH" "$(printf "$DTO_MAIN_STAGING_MRS_TITLE" "$ANDROID_STAGING_BRANCH")" "$(echo $MERGE_REQ | jq -r '.[0].assignee.id')" "$ANDROID_LABEL" "$(echo $MERGE_REQ | jq -r '.[0].reviewers[0].id')")"
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/merge_requests"
    # staging-ios
    - >
      curl --header "Content-Type: application/json"
      --header "PRIVATE-TOKEN: $PROJECT_API_TOKEN"
      --request POST
      --data "$(printf '{"source_branch":"%s","target_branch":"%s","title":"%s","assignee_id":%s,"labels":"%s","reviewer_ids":[%s]}' "$CI_DEFAULT_BRANCH" "$IOS_STAGING_BRANCH" "$(printf "$DTO_MAIN_STAGING_MRS_TITLE" "$IOS_STAGING_BRANCH")" "$(echo $MERGE_REQ | jq -r '.[0].assignee.id')" "$IOS_LABEL" "$(echo $MERGE_REQ | jq -r '.[0].reviewers[0].id')")"
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/merge_requests"
    # staging-ipados
    - >
      curl --header "Content-Type: application/json"
      --header "PRIVATE-TOKEN: $PROJECT_API_TOKEN"
      --request POST
      --data "$(printf '{"source_branch":"%s","target_branch":"%s","title":"%s","assignee_id":%s,"labels":"%s","reviewer_ids":[%s]}' "$CI_DEFAULT_BRANCH" "$IPADOS_STAGING_BRANCH" "$(printf "$DTO_MAIN_STAGING_MRS_TITLE" "$IPADOS_STAGING_BRANCH")" "$(echo $MERGE_REQ | jq -r '.[0].assignee.id')" "$IPADOS_LABEL" "$(echo $MERGE_REQ | jq -r '.[0].reviewers[0].id')")"
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/merge_requests"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

pull-changes-on-prod-server:
  stage: pull
  script:
    - cd "$PROD_DIR_LOCATION"
    - if [[ "$(git branch --show-current)" != "$CI_COMMIT_BRANCH" ]]; then echo "Production server is currently not operating on branch '${CI_COMMIT_BRANCH}'!"; exit 1; fi
    - git fetch "https://gitlab-ci-token:${PROJECT_ACCESS_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git" ${CI_COMMIT_BRANCH}
    - git pull "https://gitlab-ci-token:${PROJECT_ACCESS_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git" ${CI_COMMIT_BRANCH}
  rules:
    - if: $CI_COMMIT_BRANCH == $SERVER_BRANCH && $CI_PIPELINE_SOURCE == "push"
  environment:
    name: Production
    url: https://kivop.ipv64.net
    action: prepare
    deployment_tier: production

build-backend-docker-image-config-service:
  stage: build
  script:
    - cd "$PROD_DIR_LOCATION"
    - docker compose build config-service
  rules:
    - if: $CI_COMMIT_BRANCH == $SERVER_BRANCH && $CI_PIPELINE_SOURCE == "push"
      changes:
        - backend/config-service/**/*
    - changes:
        - backend/models/**/*
        - DTOs/**/*
      when: never
  environment:
    name: Production
    url: https://kivop.ipv64.net
    action: prepare
    deployment_tier: production

build-backend-docker-image-auth-service:
  stage: build
  script:
    - cd "$PROD_DIR_LOCATION"
    - docker compose build auth-service
  rules:
    - if: $CI_COMMIT_BRANCH == $SERVER_BRANCH && $CI_PIPELINE_SOURCE == "push"
      changes:
        - backend/auth-service/**/*
    - changes:
        - backend/models/**/*
        - DTOs/**/*
      when: never
  environment:
    name: Production
    url: https://kivop.ipv64.net
    action: prepare
    deployment_tier: production

build-backend-docker-image-meeting-service:
  stage: build
  script:
    - cd "$PROD_DIR_LOCATION"
    - docker compose build meeting-service
  rules:
    - if: $CI_COMMIT_BRANCH == $SERVER_BRANCH && $CI_PIPELINE_SOURCE == "push"
      changes:
        - backend/meeting-service/**/*
    - changes:
        - backend/models/**/*
        - DTOs/**/*
      when: never
  environment:
    name: Production
    url: https://kivop.ipv64.net
    action: prepare
    deployment_tier: production

build-backend-docker-image-notifications-service:
  stage: build
  script:
    - cd "$PROD_DIR_LOCATION"
    - docker compose build notifications-service
  rules:
    - if: $CI_COMMIT_BRANCH == $SERVER_BRANCH && $CI_PIPELINE_SOURCE == "push"
      changes:
        - backend/notifications-service/**/*
    - changes:
        - backend/models/**/*
        - DTOs/**/*
      when: never
  environment:
    name: Production
    url: https://kivop.ipv64.net
    action: prepare
    deployment_tier: production

# build-backend-docker-image-poster-service:
#   stage: build
#   script:
#     - cd "$PROD_DIR_LOCATION"
#     - docker compose build poster-service
#   rules:
#     - if: $CI_COMMIT_BRANCH == $SERVER_BRANCH && $CI_PIPELINE_SOURCE == "push"
#       changes:
#         - backend/poster-service/**/*
#     - changes:
#         - backend/models/**/*
#         - DTOs/**/*
#       when: never
#   environment:
#     name: Production
#     url: https://kivop.ipv64.net
#     action: prepare
#     deployment_tier: production

# build-backend-docker-image-carpool-service:
#   stage: build
#   script:
#     - cd "$PROD_DIR_LOCATION"
#     - docker compose build carpool-service
#   rules:
#     - if: $CI_COMMIT_BRANCH == $BACKEND_STAGING_BRANCH && $CI_PIPELINE_SOURCE == "push"
#       changes:
#         - backend/carpool-service/**/*
#     - changes:
#         - backend/models/**/*
#         - DTOs/**/*
#       when: never
#   environment:
#     name: Production
#     url: https://kivop.ipv64.net
#     action: prepare
#     deployment_tier: production

build-backend-docker-image-all-services:
  stage: build
  script:
    - cd "$PROD_DIR_LOCATION"
    - docker compose build
  rules:
    - if: $CI_COMMIT_BRANCH == $SERVER_BRANCH && $CI_PIPELINE_SOURCE == "push"
      changes:
        - backend/models/**/*
        - DTOs/**/*
  environment:
    name: Production
    url: https://kivop.ipv64.net
    action: prepare
    deployment_tier: production

deploy-containers-on-prod-server:
  stage: deploy
#   variables:
#     COMMIT_MERGE_REQ_URL: "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/commits/$CI_COMMIT_SHA/merge_requests"
  script:
#     - 'MERGE_REQ=$(curl -s --header "PRIVATE-TOKEN: $PROJECT_API_TOKEN" $COMMIT_MERGE_REQ_URL)'
#     - MR_BRANCH_NAME=$(echo $MERGE_REQ | jq -r '.[0].source_branch')
#     - if [[ "$MR_BRANCH_NAME" != "$BACKEND_STAGING_BRANCH" ]]; then exit 0; fi
    - cd "$PROD_DIR_LOCATION"
    - docker compose down
    - docker compose up -d
  rules:
    - if: $CI_COMMIT_BRANCH == $SERVER_BRANCH && $CI_PIPELINE_SOURCE == "push"
  environment:
    name: Production
    url: https://kivop.ipv64.net
    action: start
    deployment_tier: production

